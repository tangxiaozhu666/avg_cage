# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from chassis_drive/chassis_alarm.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class chassis_alarm(genpy.Message):
  _md5sum = "ae8c21bba8b1459751e77f410496d9c0"
  _type = "chassis_drive/chassis_alarm"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool alarm_forkphotoe_left_
bool alarm_forkphotoe_right_
bool alarm_cargophotos_left_
bool alarm_cargophotos_right_
bool alarm_micro_swtich_
bool alarm_collision_avoidance_
bool alarm_emergency_stop_swtich_
bool alarm_auto_man_swtich_
bool alarm_up_limit_
bool alarm_down_limit_
"""
  __slots__ = ['alarm_forkphotoe_left_','alarm_forkphotoe_right_','alarm_cargophotos_left_','alarm_cargophotos_right_','alarm_micro_swtich_','alarm_collision_avoidance_','alarm_emergency_stop_swtich_','alarm_auto_man_swtich_','alarm_up_limit_','alarm_down_limit_']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       alarm_forkphotoe_left_,alarm_forkphotoe_right_,alarm_cargophotos_left_,alarm_cargophotos_right_,alarm_micro_swtich_,alarm_collision_avoidance_,alarm_emergency_stop_swtich_,alarm_auto_man_swtich_,alarm_up_limit_,alarm_down_limit_

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(chassis_alarm, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.alarm_forkphotoe_left_ is None:
        self.alarm_forkphotoe_left_ = False
      if self.alarm_forkphotoe_right_ is None:
        self.alarm_forkphotoe_right_ = False
      if self.alarm_cargophotos_left_ is None:
        self.alarm_cargophotos_left_ = False
      if self.alarm_cargophotos_right_ is None:
        self.alarm_cargophotos_right_ = False
      if self.alarm_micro_swtich_ is None:
        self.alarm_micro_swtich_ = False
      if self.alarm_collision_avoidance_ is None:
        self.alarm_collision_avoidance_ = False
      if self.alarm_emergency_stop_swtich_ is None:
        self.alarm_emergency_stop_swtich_ = False
      if self.alarm_auto_man_swtich_ is None:
        self.alarm_auto_man_swtich_ = False
      if self.alarm_up_limit_ is None:
        self.alarm_up_limit_ = False
      if self.alarm_down_limit_ is None:
        self.alarm_down_limit_ = False
    else:
      self.alarm_forkphotoe_left_ = False
      self.alarm_forkphotoe_right_ = False
      self.alarm_cargophotos_left_ = False
      self.alarm_cargophotos_right_ = False
      self.alarm_micro_swtich_ = False
      self.alarm_collision_avoidance_ = False
      self.alarm_emergency_stop_swtich_ = False
      self.alarm_auto_man_swtich_ = False
      self.alarm_up_limit_ = False
      self.alarm_down_limit_ = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10B().pack(_x.alarm_forkphotoe_left_, _x.alarm_forkphotoe_right_, _x.alarm_cargophotos_left_, _x.alarm_cargophotos_right_, _x.alarm_micro_swtich_, _x.alarm_collision_avoidance_, _x.alarm_emergency_stop_swtich_, _x.alarm_auto_man_swtich_, _x.alarm_up_limit_, _x.alarm_down_limit_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.alarm_forkphotoe_left_, _x.alarm_forkphotoe_right_, _x.alarm_cargophotos_left_, _x.alarm_cargophotos_right_, _x.alarm_micro_swtich_, _x.alarm_collision_avoidance_, _x.alarm_emergency_stop_swtich_, _x.alarm_auto_man_swtich_, _x.alarm_up_limit_, _x.alarm_down_limit_,) = _get_struct_10B().unpack(str[start:end])
      self.alarm_forkphotoe_left_ = bool(self.alarm_forkphotoe_left_)
      self.alarm_forkphotoe_right_ = bool(self.alarm_forkphotoe_right_)
      self.alarm_cargophotos_left_ = bool(self.alarm_cargophotos_left_)
      self.alarm_cargophotos_right_ = bool(self.alarm_cargophotos_right_)
      self.alarm_micro_swtich_ = bool(self.alarm_micro_swtich_)
      self.alarm_collision_avoidance_ = bool(self.alarm_collision_avoidance_)
      self.alarm_emergency_stop_swtich_ = bool(self.alarm_emergency_stop_swtich_)
      self.alarm_auto_man_swtich_ = bool(self.alarm_auto_man_swtich_)
      self.alarm_up_limit_ = bool(self.alarm_up_limit_)
      self.alarm_down_limit_ = bool(self.alarm_down_limit_)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10B().pack(_x.alarm_forkphotoe_left_, _x.alarm_forkphotoe_right_, _x.alarm_cargophotos_left_, _x.alarm_cargophotos_right_, _x.alarm_micro_swtich_, _x.alarm_collision_avoidance_, _x.alarm_emergency_stop_swtich_, _x.alarm_auto_man_swtich_, _x.alarm_up_limit_, _x.alarm_down_limit_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.alarm_forkphotoe_left_, _x.alarm_forkphotoe_right_, _x.alarm_cargophotos_left_, _x.alarm_cargophotos_right_, _x.alarm_micro_swtich_, _x.alarm_collision_avoidance_, _x.alarm_emergency_stop_swtich_, _x.alarm_auto_man_swtich_, _x.alarm_up_limit_, _x.alarm_down_limit_,) = _get_struct_10B().unpack(str[start:end])
      self.alarm_forkphotoe_left_ = bool(self.alarm_forkphotoe_left_)
      self.alarm_forkphotoe_right_ = bool(self.alarm_forkphotoe_right_)
      self.alarm_cargophotos_left_ = bool(self.alarm_cargophotos_left_)
      self.alarm_cargophotos_right_ = bool(self.alarm_cargophotos_right_)
      self.alarm_micro_swtich_ = bool(self.alarm_micro_swtich_)
      self.alarm_collision_avoidance_ = bool(self.alarm_collision_avoidance_)
      self.alarm_emergency_stop_swtich_ = bool(self.alarm_emergency_stop_swtich_)
      self.alarm_auto_man_swtich_ = bool(self.alarm_auto_man_swtich_)
      self.alarm_up_limit_ = bool(self.alarm_up_limit_)
      self.alarm_down_limit_ = bool(self.alarm_down_limit_)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10B = None
def _get_struct_10B():
    global _struct_10B
    if _struct_10B is None:
        _struct_10B = struct.Struct("<10B")
    return _struct_10B
