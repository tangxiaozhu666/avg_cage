# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from chassis_drive/chassis_bat.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class chassis_bat(genpy.Message):
  _md5sum = "1d7bde1a0bdfdf9227bac0927d779d8f"
  _type = "chassis_drive/chassis_bat"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 bat_cap_
int16 bat_vol_
int16 bat_cur_
int16 bat_error_code_"""
  __slots__ = ['bat_cap_','bat_vol_','bat_cur_','bat_error_code_']
  _slot_types = ['int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bat_cap_,bat_vol_,bat_cur_,bat_error_code_

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(chassis_bat, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.bat_cap_ is None:
        self.bat_cap_ = 0
      if self.bat_vol_ is None:
        self.bat_vol_ = 0
      if self.bat_cur_ is None:
        self.bat_cur_ = 0
      if self.bat_error_code_ is None:
        self.bat_error_code_ = 0
    else:
      self.bat_cap_ = 0
      self.bat_vol_ = 0
      self.bat_cur_ = 0
      self.bat_error_code_ = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4h().pack(_x.bat_cap_, _x.bat_vol_, _x.bat_cur_, _x.bat_error_code_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.bat_cap_, _x.bat_vol_, _x.bat_cur_, _x.bat_error_code_,) = _get_struct_4h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4h().pack(_x.bat_cap_, _x.bat_vol_, _x.bat_cur_, _x.bat_error_code_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.bat_cap_, _x.bat_vol_, _x.bat_cur_, _x.bat_error_code_,) = _get_struct_4h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4h = None
def _get_struct_4h():
    global _struct_4h
    if _struct_4h is None:
        _struct_4h = struct.Struct("<4h")
    return _struct_4h
