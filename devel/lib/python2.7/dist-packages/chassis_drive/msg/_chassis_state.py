# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from chassis_drive/chassis_state.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class chassis_state(genpy.Message):
  _md5sum = "d74b78807fa4e4349088bf6fbedc2966"
  _type = "chassis_drive/chassis_state"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 chassis_mileage_variable_
int32 chassis_mileage_record_
int16 chassis_drive_speed_
int16 chassis_drive_angle_
int16 chassis_drivemotor_error_code_
int16 chassis_whirlmotor_erro_code_
int16 chassis_liftmotor_erro_code_

int16 chassis_task_id_
int16 chassis_task_state_
int16 chassis_selfcheck_error_code_"""
  __slots__ = ['chassis_mileage_variable_','chassis_mileage_record_','chassis_drive_speed_','chassis_drive_angle_','chassis_drivemotor_error_code_','chassis_whirlmotor_erro_code_','chassis_liftmotor_erro_code_','chassis_task_id_','chassis_task_state_','chassis_selfcheck_error_code_']
  _slot_types = ['int32','int32','int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       chassis_mileage_variable_,chassis_mileage_record_,chassis_drive_speed_,chassis_drive_angle_,chassis_drivemotor_error_code_,chassis_whirlmotor_erro_code_,chassis_liftmotor_erro_code_,chassis_task_id_,chassis_task_state_,chassis_selfcheck_error_code_

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(chassis_state, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.chassis_mileage_variable_ is None:
        self.chassis_mileage_variable_ = 0
      if self.chassis_mileage_record_ is None:
        self.chassis_mileage_record_ = 0
      if self.chassis_drive_speed_ is None:
        self.chassis_drive_speed_ = 0
      if self.chassis_drive_angle_ is None:
        self.chassis_drive_angle_ = 0
      if self.chassis_drivemotor_error_code_ is None:
        self.chassis_drivemotor_error_code_ = 0
      if self.chassis_whirlmotor_erro_code_ is None:
        self.chassis_whirlmotor_erro_code_ = 0
      if self.chassis_liftmotor_erro_code_ is None:
        self.chassis_liftmotor_erro_code_ = 0
      if self.chassis_task_id_ is None:
        self.chassis_task_id_ = 0
      if self.chassis_task_state_ is None:
        self.chassis_task_state_ = 0
      if self.chassis_selfcheck_error_code_ is None:
        self.chassis_selfcheck_error_code_ = 0
    else:
      self.chassis_mileage_variable_ = 0
      self.chassis_mileage_record_ = 0
      self.chassis_drive_speed_ = 0
      self.chassis_drive_angle_ = 0
      self.chassis_drivemotor_error_code_ = 0
      self.chassis_whirlmotor_erro_code_ = 0
      self.chassis_liftmotor_erro_code_ = 0
      self.chassis_task_id_ = 0
      self.chassis_task_state_ = 0
      self.chassis_selfcheck_error_code_ = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i8h().pack(_x.chassis_mileage_variable_, _x.chassis_mileage_record_, _x.chassis_drive_speed_, _x.chassis_drive_angle_, _x.chassis_drivemotor_error_code_, _x.chassis_whirlmotor_erro_code_, _x.chassis_liftmotor_erro_code_, _x.chassis_task_id_, _x.chassis_task_state_, _x.chassis_selfcheck_error_code_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.chassis_mileage_variable_, _x.chassis_mileage_record_, _x.chassis_drive_speed_, _x.chassis_drive_angle_, _x.chassis_drivemotor_error_code_, _x.chassis_whirlmotor_erro_code_, _x.chassis_liftmotor_erro_code_, _x.chassis_task_id_, _x.chassis_task_state_, _x.chassis_selfcheck_error_code_,) = _get_struct_2i8h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i8h().pack(_x.chassis_mileage_variable_, _x.chassis_mileage_record_, _x.chassis_drive_speed_, _x.chassis_drive_angle_, _x.chassis_drivemotor_error_code_, _x.chassis_whirlmotor_erro_code_, _x.chassis_liftmotor_erro_code_, _x.chassis_task_id_, _x.chassis_task_state_, _x.chassis_selfcheck_error_code_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.chassis_mileage_variable_, _x.chassis_mileage_record_, _x.chassis_drive_speed_, _x.chassis_drive_angle_, _x.chassis_drivemotor_error_code_, _x.chassis_whirlmotor_erro_code_, _x.chassis_liftmotor_erro_code_, _x.chassis_task_id_, _x.chassis_task_state_, _x.chassis_selfcheck_error_code_,) = _get_struct_2i8h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i8h = None
def _get_struct_2i8h():
    global _struct_2i8h
    if _struct_2i8h is None:
        _struct_2i8h = struct.Struct("<2i8h")
    return _struct_2i8h
