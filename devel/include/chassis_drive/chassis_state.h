// Generated by gencpp from file chassis_drive/chassis_state.msg
// DO NOT EDIT!


#ifndef CHASSIS_DRIVE_MESSAGE_CHASSIS_STATE_H
#define CHASSIS_DRIVE_MESSAGE_CHASSIS_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace chassis_drive
{
template <class ContainerAllocator>
struct chassis_state_
{
  typedef chassis_state_<ContainerAllocator> Type;

  chassis_state_()
    : chassis_mileage_variable_(0)
    , chassis_mileage_record_(0)
    , chassis_drive_speed_(0)
    , chassis_drive_angle_(0)
    , chassis_drivemotor_error_code_(0)
    , chassis_whirlmotor_erro_code_(0)
    , chassis_liftmotor_erro_code_(0)
    , chassis_task_id_(0)
    , chassis_task_state_(0)
    , chassis_selfcheck_error_code_(0)  {
    }
  chassis_state_(const ContainerAllocator& _alloc)
    : chassis_mileage_variable_(0)
    , chassis_mileage_record_(0)
    , chassis_drive_speed_(0)
    , chassis_drive_angle_(0)
    , chassis_drivemotor_error_code_(0)
    , chassis_whirlmotor_erro_code_(0)
    , chassis_liftmotor_erro_code_(0)
    , chassis_task_id_(0)
    , chassis_task_state_(0)
    , chassis_selfcheck_error_code_(0)  {
  (void)_alloc;
    }



   typedef int32_t _chassis_mileage_variable__type;
  _chassis_mileage_variable__type chassis_mileage_variable_;

   typedef int32_t _chassis_mileage_record__type;
  _chassis_mileage_record__type chassis_mileage_record_;

   typedef int16_t _chassis_drive_speed__type;
  _chassis_drive_speed__type chassis_drive_speed_;

   typedef int16_t _chassis_drive_angle__type;
  _chassis_drive_angle__type chassis_drive_angle_;

   typedef int16_t _chassis_drivemotor_error_code__type;
  _chassis_drivemotor_error_code__type chassis_drivemotor_error_code_;

   typedef int16_t _chassis_whirlmotor_erro_code__type;
  _chassis_whirlmotor_erro_code__type chassis_whirlmotor_erro_code_;

   typedef int16_t _chassis_liftmotor_erro_code__type;
  _chassis_liftmotor_erro_code__type chassis_liftmotor_erro_code_;

   typedef int16_t _chassis_task_id__type;
  _chassis_task_id__type chassis_task_id_;

   typedef int16_t _chassis_task_state__type;
  _chassis_task_state__type chassis_task_state_;

   typedef int16_t _chassis_selfcheck_error_code__type;
  _chassis_selfcheck_error_code__type chassis_selfcheck_error_code_;





  typedef boost::shared_ptr< ::chassis_drive::chassis_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chassis_drive::chassis_state_<ContainerAllocator> const> ConstPtr;

}; // struct chassis_state_

typedef ::chassis_drive::chassis_state_<std::allocator<void> > chassis_state;

typedef boost::shared_ptr< ::chassis_drive::chassis_state > chassis_statePtr;
typedef boost::shared_ptr< ::chassis_drive::chassis_state const> chassis_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chassis_drive::chassis_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chassis_drive::chassis_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chassis_drive::chassis_state_<ContainerAllocator1> & lhs, const ::chassis_drive::chassis_state_<ContainerAllocator2> & rhs)
{
  return lhs.chassis_mileage_variable_ == rhs.chassis_mileage_variable_ &&
    lhs.chassis_mileage_record_ == rhs.chassis_mileage_record_ &&
    lhs.chassis_drive_speed_ == rhs.chassis_drive_speed_ &&
    lhs.chassis_drive_angle_ == rhs.chassis_drive_angle_ &&
    lhs.chassis_drivemotor_error_code_ == rhs.chassis_drivemotor_error_code_ &&
    lhs.chassis_whirlmotor_erro_code_ == rhs.chassis_whirlmotor_erro_code_ &&
    lhs.chassis_liftmotor_erro_code_ == rhs.chassis_liftmotor_erro_code_ &&
    lhs.chassis_task_id_ == rhs.chassis_task_id_ &&
    lhs.chassis_task_state_ == rhs.chassis_task_state_ &&
    lhs.chassis_selfcheck_error_code_ == rhs.chassis_selfcheck_error_code_;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chassis_drive::chassis_state_<ContainerAllocator1> & lhs, const ::chassis_drive::chassis_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chassis_drive

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::chassis_drive::chassis_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chassis_drive::chassis_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_drive::chassis_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_drive::chassis_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_drive::chassis_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_drive::chassis_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chassis_drive::chassis_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d74b78807fa4e4349088bf6fbedc2966";
  }

  static const char* value(const ::chassis_drive::chassis_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd74b78807fa4e434ULL;
  static const uint64_t static_value2 = 0x9088bf6fbedc2966ULL;
};

template<class ContainerAllocator>
struct DataType< ::chassis_drive::chassis_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chassis_drive/chassis_state";
  }

  static const char* value(const ::chassis_drive::chassis_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chassis_drive::chassis_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 chassis_mileage_variable_\n"
"int32 chassis_mileage_record_\n"
"int16 chassis_drive_speed_\n"
"int16 chassis_drive_angle_\n"
"int16 chassis_drivemotor_error_code_\n"
"int16 chassis_whirlmotor_erro_code_\n"
"int16 chassis_liftmotor_erro_code_\n"
"\n"
"int16 chassis_task_id_\n"
"int16 chassis_task_state_\n"
"int16 chassis_selfcheck_error_code_\n"
;
  }

  static const char* value(const ::chassis_drive::chassis_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chassis_drive::chassis_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.chassis_mileage_variable_);
      stream.next(m.chassis_mileage_record_);
      stream.next(m.chassis_drive_speed_);
      stream.next(m.chassis_drive_angle_);
      stream.next(m.chassis_drivemotor_error_code_);
      stream.next(m.chassis_whirlmotor_erro_code_);
      stream.next(m.chassis_liftmotor_erro_code_);
      stream.next(m.chassis_task_id_);
      stream.next(m.chassis_task_state_);
      stream.next(m.chassis_selfcheck_error_code_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct chassis_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chassis_drive::chassis_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chassis_drive::chassis_state_<ContainerAllocator>& v)
  {
    s << indent << "chassis_mileage_variable_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.chassis_mileage_variable_);
    s << indent << "chassis_mileage_record_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.chassis_mileage_record_);
    s << indent << "chassis_drive_speed_: ";
    Printer<int16_t>::stream(s, indent + "  ", v.chassis_drive_speed_);
    s << indent << "chassis_drive_angle_: ";
    Printer<int16_t>::stream(s, indent + "  ", v.chassis_drive_angle_);
    s << indent << "chassis_drivemotor_error_code_: ";
    Printer<int16_t>::stream(s, indent + "  ", v.chassis_drivemotor_error_code_);
    s << indent << "chassis_whirlmotor_erro_code_: ";
    Printer<int16_t>::stream(s, indent + "  ", v.chassis_whirlmotor_erro_code_);
    s << indent << "chassis_liftmotor_erro_code_: ";
    Printer<int16_t>::stream(s, indent + "  ", v.chassis_liftmotor_erro_code_);
    s << indent << "chassis_task_id_: ";
    Printer<int16_t>::stream(s, indent + "  ", v.chassis_task_id_);
    s << indent << "chassis_task_state_: ";
    Printer<int16_t>::stream(s, indent + "  ", v.chassis_task_state_);
    s << indent << "chassis_selfcheck_error_code_: ";
    Printer<int16_t>::stream(s, indent + "  ", v.chassis_selfcheck_error_code_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHASSIS_DRIVE_MESSAGE_CHASSIS_STATE_H
