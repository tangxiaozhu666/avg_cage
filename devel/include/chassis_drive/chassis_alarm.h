// Generated by gencpp from file chassis_drive/chassis_alarm.msg
// DO NOT EDIT!


#ifndef CHASSIS_DRIVE_MESSAGE_CHASSIS_ALARM_H
#define CHASSIS_DRIVE_MESSAGE_CHASSIS_ALARM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace chassis_drive
{
template <class ContainerAllocator>
struct chassis_alarm_
{
  typedef chassis_alarm_<ContainerAllocator> Type;

  chassis_alarm_()
    : alarm_forkphotoe_left_(false)
    , alarm_forkphotoe_right_(false)
    , alarm_cargophotos_left_(false)
    , alarm_cargophotos_right_(false)
    , alarm_micro_swtich_(false)
    , alarm_collision_avoidance_(false)
    , alarm_emergency_stop_swtich_(false)
    , alarm_auto_man_swtich_(false)
    , alarm_up_limit_(false)
    , alarm_down_limit_(false)  {
    }
  chassis_alarm_(const ContainerAllocator& _alloc)
    : alarm_forkphotoe_left_(false)
    , alarm_forkphotoe_right_(false)
    , alarm_cargophotos_left_(false)
    , alarm_cargophotos_right_(false)
    , alarm_micro_swtich_(false)
    , alarm_collision_avoidance_(false)
    , alarm_emergency_stop_swtich_(false)
    , alarm_auto_man_swtich_(false)
    , alarm_up_limit_(false)
    , alarm_down_limit_(false)  {
  (void)_alloc;
    }



   typedef uint8_t _alarm_forkphotoe_left__type;
  _alarm_forkphotoe_left__type alarm_forkphotoe_left_;

   typedef uint8_t _alarm_forkphotoe_right__type;
  _alarm_forkphotoe_right__type alarm_forkphotoe_right_;

   typedef uint8_t _alarm_cargophotos_left__type;
  _alarm_cargophotos_left__type alarm_cargophotos_left_;

   typedef uint8_t _alarm_cargophotos_right__type;
  _alarm_cargophotos_right__type alarm_cargophotos_right_;

   typedef uint8_t _alarm_micro_swtich__type;
  _alarm_micro_swtich__type alarm_micro_swtich_;

   typedef uint8_t _alarm_collision_avoidance__type;
  _alarm_collision_avoidance__type alarm_collision_avoidance_;

   typedef uint8_t _alarm_emergency_stop_swtich__type;
  _alarm_emergency_stop_swtich__type alarm_emergency_stop_swtich_;

   typedef uint8_t _alarm_auto_man_swtich__type;
  _alarm_auto_man_swtich__type alarm_auto_man_swtich_;

   typedef uint8_t _alarm_up_limit__type;
  _alarm_up_limit__type alarm_up_limit_;

   typedef uint8_t _alarm_down_limit__type;
  _alarm_down_limit__type alarm_down_limit_;





  typedef boost::shared_ptr< ::chassis_drive::chassis_alarm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chassis_drive::chassis_alarm_<ContainerAllocator> const> ConstPtr;

}; // struct chassis_alarm_

typedef ::chassis_drive::chassis_alarm_<std::allocator<void> > chassis_alarm;

typedef boost::shared_ptr< ::chassis_drive::chassis_alarm > chassis_alarmPtr;
typedef boost::shared_ptr< ::chassis_drive::chassis_alarm const> chassis_alarmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chassis_drive::chassis_alarm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chassis_drive::chassis_alarm_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chassis_drive::chassis_alarm_<ContainerAllocator1> & lhs, const ::chassis_drive::chassis_alarm_<ContainerAllocator2> & rhs)
{
  return lhs.alarm_forkphotoe_left_ == rhs.alarm_forkphotoe_left_ &&
    lhs.alarm_forkphotoe_right_ == rhs.alarm_forkphotoe_right_ &&
    lhs.alarm_cargophotos_left_ == rhs.alarm_cargophotos_left_ &&
    lhs.alarm_cargophotos_right_ == rhs.alarm_cargophotos_right_ &&
    lhs.alarm_micro_swtich_ == rhs.alarm_micro_swtich_ &&
    lhs.alarm_collision_avoidance_ == rhs.alarm_collision_avoidance_ &&
    lhs.alarm_emergency_stop_swtich_ == rhs.alarm_emergency_stop_swtich_ &&
    lhs.alarm_auto_man_swtich_ == rhs.alarm_auto_man_swtich_ &&
    lhs.alarm_up_limit_ == rhs.alarm_up_limit_ &&
    lhs.alarm_down_limit_ == rhs.alarm_down_limit_;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chassis_drive::chassis_alarm_<ContainerAllocator1> & lhs, const ::chassis_drive::chassis_alarm_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chassis_drive

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::chassis_drive::chassis_alarm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chassis_drive::chassis_alarm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_drive::chassis_alarm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_drive::chassis_alarm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_drive::chassis_alarm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_drive::chassis_alarm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chassis_drive::chassis_alarm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae8c21bba8b1459751e77f410496d9c0";
  }

  static const char* value(const ::chassis_drive::chassis_alarm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae8c21bba8b14597ULL;
  static const uint64_t static_value2 = 0x51e77f410496d9c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::chassis_drive::chassis_alarm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chassis_drive/chassis_alarm";
  }

  static const char* value(const ::chassis_drive::chassis_alarm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chassis_drive::chassis_alarm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool alarm_forkphotoe_left_\n"
"bool alarm_forkphotoe_right_\n"
"bool alarm_cargophotos_left_\n"
"bool alarm_cargophotos_right_\n"
"bool alarm_micro_swtich_\n"
"bool alarm_collision_avoidance_\n"
"bool alarm_emergency_stop_swtich_\n"
"bool alarm_auto_man_swtich_\n"
"bool alarm_up_limit_\n"
"bool alarm_down_limit_\n"
;
  }

  static const char* value(const ::chassis_drive::chassis_alarm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chassis_drive::chassis_alarm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.alarm_forkphotoe_left_);
      stream.next(m.alarm_forkphotoe_right_);
      stream.next(m.alarm_cargophotos_left_);
      stream.next(m.alarm_cargophotos_right_);
      stream.next(m.alarm_micro_swtich_);
      stream.next(m.alarm_collision_avoidance_);
      stream.next(m.alarm_emergency_stop_swtich_);
      stream.next(m.alarm_auto_man_swtich_);
      stream.next(m.alarm_up_limit_);
      stream.next(m.alarm_down_limit_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct chassis_alarm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chassis_drive::chassis_alarm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chassis_drive::chassis_alarm_<ContainerAllocator>& v)
  {
    s << indent << "alarm_forkphotoe_left_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_forkphotoe_left_);
    s << indent << "alarm_forkphotoe_right_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_forkphotoe_right_);
    s << indent << "alarm_cargophotos_left_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_cargophotos_left_);
    s << indent << "alarm_cargophotos_right_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_cargophotos_right_);
    s << indent << "alarm_micro_swtich_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_micro_swtich_);
    s << indent << "alarm_collision_avoidance_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_collision_avoidance_);
    s << indent << "alarm_emergency_stop_swtich_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_emergency_stop_swtich_);
    s << indent << "alarm_auto_man_swtich_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_auto_man_swtich_);
    s << indent << "alarm_up_limit_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_up_limit_);
    s << indent << "alarm_down_limit_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_down_limit_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHASSIS_DRIVE_MESSAGE_CHASSIS_ALARM_H
