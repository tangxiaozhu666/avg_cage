// Generated by gencpp from file chassis_drive/chassis_bat.msg
// DO NOT EDIT!


#ifndef CHASSIS_DRIVE_MESSAGE_CHASSIS_BAT_H
#define CHASSIS_DRIVE_MESSAGE_CHASSIS_BAT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace chassis_drive
{
template <class ContainerAllocator>
struct chassis_bat_
{
  typedef chassis_bat_<ContainerAllocator> Type;

  chassis_bat_()
    : bat_cap_(0)
    , bat_vol_(0)
    , bat_cur_(0)
    , bat_error_code_(0)  {
    }
  chassis_bat_(const ContainerAllocator& _alloc)
    : bat_cap_(0)
    , bat_vol_(0)
    , bat_cur_(0)
    , bat_error_code_(0)  {
  (void)_alloc;
    }



   typedef int16_t _bat_cap__type;
  _bat_cap__type bat_cap_;

   typedef int16_t _bat_vol__type;
  _bat_vol__type bat_vol_;

   typedef int16_t _bat_cur__type;
  _bat_cur__type bat_cur_;

   typedef int16_t _bat_error_code__type;
  _bat_error_code__type bat_error_code_;





  typedef boost::shared_ptr< ::chassis_drive::chassis_bat_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chassis_drive::chassis_bat_<ContainerAllocator> const> ConstPtr;

}; // struct chassis_bat_

typedef ::chassis_drive::chassis_bat_<std::allocator<void> > chassis_bat;

typedef boost::shared_ptr< ::chassis_drive::chassis_bat > chassis_batPtr;
typedef boost::shared_ptr< ::chassis_drive::chassis_bat const> chassis_batConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chassis_drive::chassis_bat_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chassis_drive::chassis_bat_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chassis_drive::chassis_bat_<ContainerAllocator1> & lhs, const ::chassis_drive::chassis_bat_<ContainerAllocator2> & rhs)
{
  return lhs.bat_cap_ == rhs.bat_cap_ &&
    lhs.bat_vol_ == rhs.bat_vol_ &&
    lhs.bat_cur_ == rhs.bat_cur_ &&
    lhs.bat_error_code_ == rhs.bat_error_code_;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chassis_drive::chassis_bat_<ContainerAllocator1> & lhs, const ::chassis_drive::chassis_bat_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chassis_drive

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::chassis_drive::chassis_bat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chassis_drive::chassis_bat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_drive::chassis_bat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_drive::chassis_bat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_drive::chassis_bat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_drive::chassis_bat_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chassis_drive::chassis_bat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d7bde1a0bdfdf9227bac0927d779d8f";
  }

  static const char* value(const ::chassis_drive::chassis_bat_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d7bde1a0bdfdf92ULL;
  static const uint64_t static_value2 = 0x27bac0927d779d8fULL;
};

template<class ContainerAllocator>
struct DataType< ::chassis_drive::chassis_bat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chassis_drive/chassis_bat";
  }

  static const char* value(const ::chassis_drive::chassis_bat_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chassis_drive::chassis_bat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 bat_cap_\n"
"int16 bat_vol_\n"
"int16 bat_cur_\n"
"int16 bat_error_code_\n"
;
  }

  static const char* value(const ::chassis_drive::chassis_bat_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chassis_drive::chassis_bat_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bat_cap_);
      stream.next(m.bat_vol_);
      stream.next(m.bat_cur_);
      stream.next(m.bat_error_code_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct chassis_bat_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chassis_drive::chassis_bat_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chassis_drive::chassis_bat_<ContainerAllocator>& v)
  {
    s << indent << "bat_cap_: ";
    Printer<int16_t>::stream(s, indent + "  ", v.bat_cap_);
    s << indent << "bat_vol_: ";
    Printer<int16_t>::stream(s, indent + "  ", v.bat_vol_);
    s << indent << "bat_cur_: ";
    Printer<int16_t>::stream(s, indent + "  ", v.bat_cur_);
    s << indent << "bat_error_code_: ";
    Printer<int16_t>::stream(s, indent + "  ", v.bat_error_code_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHASSIS_DRIVE_MESSAGE_CHASSIS_BAT_H
