// Generated by gencpp from file agvs_control/cmd_control_taskRequest.msg
// DO NOT EDIT!


#ifndef AGVS_CONTROL_MESSAGE_CMD_CONTROL_TASKREQUEST_H
#define AGVS_CONTROL_MESSAGE_CMD_CONTROL_TASKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agvs_control
{
template <class ContainerAllocator>
struct cmd_control_taskRequest_
{
  typedef cmd_control_taskRequest_<ContainerAllocator> Type;

  cmd_control_taskRequest_()
    : mode_run(0)  {
    }
  cmd_control_taskRequest_(const ContainerAllocator& _alloc)
    : mode_run(0)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_run_type;
  _mode_run_type mode_run;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(manual_mode)
  #undef manual_mode
#endif
#if defined(_WIN32) && defined(auto_mode)
  #undef auto_mode
#endif

  enum {
    manual_mode = 1u,
    auto_mode = 2u,
  };


  typedef boost::shared_ptr< ::agvs_control::cmd_control_taskRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agvs_control::cmd_control_taskRequest_<ContainerAllocator> const> ConstPtr;

}; // struct cmd_control_taskRequest_

typedef ::agvs_control::cmd_control_taskRequest_<std::allocator<void> > cmd_control_taskRequest;

typedef boost::shared_ptr< ::agvs_control::cmd_control_taskRequest > cmd_control_taskRequestPtr;
typedef boost::shared_ptr< ::agvs_control::cmd_control_taskRequest const> cmd_control_taskRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agvs_control::cmd_control_taskRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agvs_control::cmd_control_taskRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agvs_control::cmd_control_taskRequest_<ContainerAllocator1> & lhs, const ::agvs_control::cmd_control_taskRequest_<ContainerAllocator2> & rhs)
{
  return lhs.mode_run == rhs.mode_run;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agvs_control::cmd_control_taskRequest_<ContainerAllocator1> & lhs, const ::agvs_control::cmd_control_taskRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agvs_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::agvs_control::cmd_control_taskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agvs_control::cmd_control_taskRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agvs_control::cmd_control_taskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agvs_control::cmd_control_taskRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agvs_control::cmd_control_taskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agvs_control::cmd_control_taskRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agvs_control::cmd_control_taskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9b5bf540932291b1fe9cba3efc63097";
  }

  static const char* value(const ::agvs_control::cmd_control_taskRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9b5bf540932291bULL;
  static const uint64_t static_value2 = 0x1fe9cba3efc63097ULL;
};

template<class ContainerAllocator>
struct DataType< ::agvs_control::cmd_control_taskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agvs_control/cmd_control_taskRequest";
  }

  static const char* value(const ::agvs_control::cmd_control_taskRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agvs_control::cmd_control_taskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 mode_run \n"
"uint8 manual_mode=1\n"
"uint8 auto_mode=2\n"
"\n"
;
  }

  static const char* value(const ::agvs_control::cmd_control_taskRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agvs_control::cmd_control_taskRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode_run);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmd_control_taskRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agvs_control::cmd_control_taskRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agvs_control::cmd_control_taskRequest_<ContainerAllocator>& v)
  {
    s << indent << "mode_run: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode_run);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGVS_CONTROL_MESSAGE_CMD_CONTROL_TASKREQUEST_H
