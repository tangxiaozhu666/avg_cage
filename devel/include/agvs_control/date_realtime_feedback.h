// Generated by gencpp from file agvs_control/date_realtime_feedback.msg
// DO NOT EDIT!


#ifndef AGVS_CONTROL_MESSAGE_DATE_REALTIME_FEEDBACK_H
#define AGVS_CONTROL_MESSAGE_DATE_REALTIME_FEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agvs_control
{
template <class ContainerAllocator>
struct date_realtime_feedback_
{
  typedef date_realtime_feedback_<ContainerAllocator> Type;

  date_realtime_feedback_()
    : theta_angle(0.0)
    , theta_x(0.0)
    , theta_y(0.0)
    , speed_y(0.0)  {
    }
  date_realtime_feedback_(const ContainerAllocator& _alloc)
    : theta_angle(0.0)
    , theta_x(0.0)
    , theta_y(0.0)
    , speed_y(0.0)  {
  (void)_alloc;
    }



   typedef float _theta_angle_type;
  _theta_angle_type theta_angle;

   typedef float _theta_x_type;
  _theta_x_type theta_x;

   typedef float _theta_y_type;
  _theta_y_type theta_y;

   typedef float _speed_y_type;
  _speed_y_type speed_y;





  typedef boost::shared_ptr< ::agvs_control::date_realtime_feedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agvs_control::date_realtime_feedback_<ContainerAllocator> const> ConstPtr;

}; // struct date_realtime_feedback_

typedef ::agvs_control::date_realtime_feedback_<std::allocator<void> > date_realtime_feedback;

typedef boost::shared_ptr< ::agvs_control::date_realtime_feedback > date_realtime_feedbackPtr;
typedef boost::shared_ptr< ::agvs_control::date_realtime_feedback const> date_realtime_feedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agvs_control::date_realtime_feedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agvs_control::date_realtime_feedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agvs_control::date_realtime_feedback_<ContainerAllocator1> & lhs, const ::agvs_control::date_realtime_feedback_<ContainerAllocator2> & rhs)
{
  return lhs.theta_angle == rhs.theta_angle &&
    lhs.theta_x == rhs.theta_x &&
    lhs.theta_y == rhs.theta_y &&
    lhs.speed_y == rhs.speed_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agvs_control::date_realtime_feedback_<ContainerAllocator1> & lhs, const ::agvs_control::date_realtime_feedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agvs_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::agvs_control::date_realtime_feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agvs_control::date_realtime_feedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agvs_control::date_realtime_feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agvs_control::date_realtime_feedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agvs_control::date_realtime_feedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agvs_control::date_realtime_feedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agvs_control::date_realtime_feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9373b18cc1268d229a49f9c7a9f9ccc5";
  }

  static const char* value(const ::agvs_control::date_realtime_feedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9373b18cc1268d22ULL;
  static const uint64_t static_value2 = 0x9a49f9c7a9f9ccc5ULL;
};

template<class ContainerAllocator>
struct DataType< ::agvs_control::date_realtime_feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agvs_control/date_realtime_feedback";
  }

  static const char* value(const ::agvs_control::date_realtime_feedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agvs_control::date_realtime_feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 theta_angle\n"
"float32 theta_x\n"
"float32 theta_y\n"
"\n"
"float32 speed_y\n"
;
  }

  static const char* value(const ::agvs_control::date_realtime_feedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agvs_control::date_realtime_feedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.theta_angle);
      stream.next(m.theta_x);
      stream.next(m.theta_y);
      stream.next(m.speed_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct date_realtime_feedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agvs_control::date_realtime_feedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agvs_control::date_realtime_feedback_<ContainerAllocator>& v)
  {
    s << indent << "theta_angle: ";
    Printer<float>::stream(s, indent + "  ", v.theta_angle);
    s << indent << "theta_x: ";
    Printer<float>::stream(s, indent + "  ", v.theta_x);
    s << indent << "theta_y: ";
    Printer<float>::stream(s, indent + "  ", v.theta_y);
    s << indent << "speed_y: ";
    Printer<float>::stream(s, indent + "  ", v.speed_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGVS_CONTROL_MESSAGE_DATE_REALTIME_FEEDBACK_H
