// Generated by gencpp from file agvs_control/date_pads_cmd.msg
// DO NOT EDIT!


#ifndef AGVS_CONTROL_MESSAGE_DATE_PADS_CMD_H
#define AGVS_CONTROL_MESSAGE_DATE_PADS_CMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agvs_control
{
template <class ContainerAllocator>
struct date_pads_cmd_
{
  typedef date_pads_cmd_<ContainerAllocator> Type;

  date_pads_cmd_()
    : angle_date(0.0)
    , speed_date(0.0)  {
    }
  date_pads_cmd_(const ContainerAllocator& _alloc)
    : angle_date(0.0)
    , speed_date(0.0)  {
  (void)_alloc;
    }



   typedef float _angle_date_type;
  _angle_date_type angle_date;

   typedef float _speed_date_type;
  _speed_date_type speed_date;





  typedef boost::shared_ptr< ::agvs_control::date_pads_cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agvs_control::date_pads_cmd_<ContainerAllocator> const> ConstPtr;

}; // struct date_pads_cmd_

typedef ::agvs_control::date_pads_cmd_<std::allocator<void> > date_pads_cmd;

typedef boost::shared_ptr< ::agvs_control::date_pads_cmd > date_pads_cmdPtr;
typedef boost::shared_ptr< ::agvs_control::date_pads_cmd const> date_pads_cmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agvs_control::date_pads_cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agvs_control::date_pads_cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agvs_control::date_pads_cmd_<ContainerAllocator1> & lhs, const ::agvs_control::date_pads_cmd_<ContainerAllocator2> & rhs)
{
  return lhs.angle_date == rhs.angle_date &&
    lhs.speed_date == rhs.speed_date;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agvs_control::date_pads_cmd_<ContainerAllocator1> & lhs, const ::agvs_control::date_pads_cmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agvs_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::agvs_control::date_pads_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agvs_control::date_pads_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agvs_control::date_pads_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agvs_control::date_pads_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agvs_control::date_pads_cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agvs_control::date_pads_cmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agvs_control::date_pads_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "400b13fd7cc1c6f886c0fcc01fcab9aa";
  }

  static const char* value(const ::agvs_control::date_pads_cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x400b13fd7cc1c6f8ULL;
  static const uint64_t static_value2 = 0x86c0fcc01fcab9aaULL;
};

template<class ContainerAllocator>
struct DataType< ::agvs_control::date_pads_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agvs_control/date_pads_cmd";
  }

  static const char* value(const ::agvs_control::date_pads_cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agvs_control::date_pads_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 angle_date\n"
"float32 speed_date\n"
;
  }

  static const char* value(const ::agvs_control::date_pads_cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agvs_control::date_pads_cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle_date);
      stream.next(m.speed_date);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct date_pads_cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agvs_control::date_pads_cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agvs_control::date_pads_cmd_<ContainerAllocator>& v)
  {
    s << indent << "angle_date: ";
    Printer<float>::stream(s, indent + "  ", v.angle_date);
    s << indent << "speed_date: ";
    Printer<float>::stream(s, indent + "  ", v.speed_date);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGVS_CONTROL_MESSAGE_DATE_PADS_CMD_H
