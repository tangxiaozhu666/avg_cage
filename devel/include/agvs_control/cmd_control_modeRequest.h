// Generated by gencpp from file agvs_control/cmd_control_modeRequest.msg
// DO NOT EDIT!


#ifndef AGVS_CONTROL_MESSAGE_CMD_CONTROL_MODEREQUEST_H
#define AGVS_CONTROL_MESSAGE_CMD_CONTROL_MODEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agvs_control
{
template <class ContainerAllocator>
struct cmd_control_modeRequest_
{
  typedef cmd_control_modeRequest_<ContainerAllocator> Type;

  cmd_control_modeRequest_()
    : mode_run()  {
    }
  cmd_control_modeRequest_(const ContainerAllocator& _alloc)
    : mode_run(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_run_type;
  _mode_run_type mode_run;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(manual_mode)
  #undef manual_mode
#endif
#if defined(_WIN32) && defined(auto_mode)
  #undef auto_mode
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  manual_mode;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  auto_mode;

  typedef boost::shared_ptr< ::agvs_control::cmd_control_modeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agvs_control::cmd_control_modeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct cmd_control_modeRequest_

typedef ::agvs_control::cmd_control_modeRequest_<std::allocator<void> > cmd_control_modeRequest;

typedef boost::shared_ptr< ::agvs_control::cmd_control_modeRequest > cmd_control_modeRequestPtr;
typedef boost::shared_ptr< ::agvs_control::cmd_control_modeRequest const> cmd_control_modeRequestConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      cmd_control_modeRequest_<ContainerAllocator>::manual_mode =
        
          "\"manual_mode\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      cmd_control_modeRequest_<ContainerAllocator>::auto_mode =
        
          "\"auto_mode\""
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agvs_control::cmd_control_modeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agvs_control::cmd_control_modeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agvs_control::cmd_control_modeRequest_<ContainerAllocator1> & lhs, const ::agvs_control::cmd_control_modeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.mode_run == rhs.mode_run;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agvs_control::cmd_control_modeRequest_<ContainerAllocator1> & lhs, const ::agvs_control::cmd_control_modeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agvs_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::agvs_control::cmd_control_modeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agvs_control::cmd_control_modeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agvs_control::cmd_control_modeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agvs_control::cmd_control_modeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agvs_control::cmd_control_modeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agvs_control::cmd_control_modeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agvs_control::cmd_control_modeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0545bf3db61acfe8473d040eb76fcb1c";
  }

  static const char* value(const ::agvs_control::cmd_control_modeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0545bf3db61acfe8ULL;
  static const uint64_t static_value2 = 0x473d040eb76fcb1cULL;
};

template<class ContainerAllocator>
struct DataType< ::agvs_control::cmd_control_modeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agvs_control/cmd_control_modeRequest";
  }

  static const char* value(const ::agvs_control::cmd_control_modeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agvs_control::cmd_control_modeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string mode_run \n"
"string manual_mode=\"manual_mode\"\n"
"string auto_mode=\"auto_mode\"\n"
"\n"
;
  }

  static const char* value(const ::agvs_control::cmd_control_modeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agvs_control::cmd_control_modeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode_run);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmd_control_modeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agvs_control::cmd_control_modeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agvs_control::cmd_control_modeRequest_<ContainerAllocator>& v)
  {
    s << indent << "mode_run: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode_run);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGVS_CONTROL_MESSAGE_CMD_CONTROL_MODEREQUEST_H
